{"version":3,"sources":["components/Card.js","components/Container.js","components/Navbar.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["style","display","pading","cursor","width","height","marginBottom","margin","imgStyle","cardStyle","padding","card","props","className","onClick","id","src","image","value","alt","Container","this","children","Component","backgroundColor","fontSize","textAlign","navbar","href","message","score","highScore","instructions","App","state","charCards","shake","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","resetClass","setState","clickCardHandler","charIndex","isClicked","map","x","Navbar","Instructions","character","index","Card","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0bc01a2.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\n\nconst style ={\n    display:'inline-block',\n    pading:'6px',\n    cursor: 'pointer',\n    width: '200px',\n    height:'200px',\n    marginBottom:'10px',\n    margin:'15px',\n   \n  };\n\n  const imgStyle = {\n     \n      width:'100%',\n      height:'100%',\n    \n\n  };\n\n  const cardStyle = {\n    width:'100%',\n    height:'100%',\n    padding:'5px',\n   \n  };\n\n\n\nconst card = ( props ) => {\n    return (\n        <div style={style}>\n            <div className=\"card\" style={cardStyle}> \n                <img \n                className = {props.className}\n                onClick={props.onClick}\n                id = {props.id} \n                style = {imgStyle} \n                src = {props.image}\n                value = {props.value}\n                alt = \"char card pic\"></img>\n            </div>\n        </div>\n    );\n};\n\nexport default card;","import React, {Component} from 'react';\n\nclass Container extends Component {\n    render(){\n\n    \n    return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-2,col-sm-12,col-lg-3\"></div>\n                    <div className=\"col-md-8,col-sm-12,col-lg-6\">\n                            {this.props.children};\n                    </div>\n                    <div className=\"col-md-2,col-sm-12,col-lg-3\"></div>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default Container;","import React from 'react';\n\n\nconst style = {\n    backgroundColor:\"purple\",\n    fontSize:'20px',\n    textAlign:'center'\n  \n}\n\nconst navbar = (props)=>{\n        return(\n            <nav className=\"nav nav-pills nav-fill sticky-top\">\n                <button style={style} className=\"nav-item nav-link\" href=\"#\">CLICKY-ClICK ClICK-ClIKSTER!!</button>\n                <button style={style} className=\"nav-item nav-link\" href=\"#\">{props.message}</button>\n                <button style={style} className=\"nav-item nav-link\">SCORE:{props.score}  | TOP SCORE:{props.highScore}</button>\n            </nav>\n            );\n    };\n\n\nexport default navbar;","import React from 'react';\n\nconst instructions = (props) =>{\n    return(\n        \n      <div className=\"jumbotron\">\n        <h1>Clicky Game!</h1>\n        <h3>Click a card to earn points, but click one twice and you lose!</h3>\n      </div>\n    \n    );\n};\n\nexport default instructions;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Card from './components/Card';\nimport Container from './components/Container';\nimport Navbar from './components/Navbar';\nimport Instructions from './components/Instructions';\nimport charCards from './components/CharCards.json';\n\nclass App extends Component {\n  state = {\n    charCards,\n    score: 0,\n    highScore: 0,\n    shake: \"\",\n    message: \"\"\n  };\n\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  resetClass = ()=>{\n    this.setState({shake:\"\"});\n  };\n\n  clickCardHandler = (charIndex) => {\n    this.resetClass();\n    const charCards = this.state.charCards;\n\n\n    let isClicked = this.state.charCards[charIndex].isClicked;\n    var score = this.state.score;\n    var highScore = this.state.highScore;\n\n\n    if (isClicked === false) {\n      charCards[charIndex].isClicked = true;\n      this.shuffle(charCards);\n      score++;\n\n      if (highScore < score) {\n        highScore++;\n      }\n\n      this.setState({ message:\"\",charCards: charCards, score: score, highScore: highScore });\n\n    }\n\n    else {\n      let x = [];\n      charCards.map(function (x) {\n        x.isClicked = false;\n        return x\n      });\n\n      this.shuffle(x);\n      score = 0;\n      this.setState({ message:\"You Already Clicked That One!!\", shake: \"shake\", x: charCards, score: score });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          message = {this.state.message}\n        />\n        <Instructions />\n        <Container>\n\n          {this.state.charCards.map((character, index) => {\n            return (<Card\n              className={this.state.shake}\n              key={character.id}\n              id={character.id}\n              onClick={() => this.clickCardHandler(index)}\n              image={character.image}\n              value={character.isClicked}\n              alt=\"CharPic\"\n            ></Card>);\n          })};\n      </Container>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}